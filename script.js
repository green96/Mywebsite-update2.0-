// declare a variable named xp
// and we assigned to the value of 0
let xp = 0;// This is player experience points

// declare health variable(player health) assigned to the value of 100
let health = 100;// player health

// In javascript semicolons are optional(We mostly use semicolons just to signify that it is the end of a line)

let gold = 50; // m·∫∑c dinh la 50 (test de cao 999 )

//Camel case
//Camel Case (vi·∫øt ki·ªÉu l·∫°c ƒë√†) l√† c√°ch vi·∫øt n·ªëi nhi·ªÅu t·ª´ l·∫°i v·ªõi nhau, trong ƒë√≥:
    //T·ª´ ƒë·∫ßu ti√™n vi·∫øt th∆∞·ªùng ho√†n to√†n.
    //C√°c t·ª´ ti·∫øp theo vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu ti√™n.
//V√≠ d·ª•:currentWeapon,totalScore
// nh√¨n gi·ªëng nh∆∞ l∆∞ng con l·∫°c ƒë√†, ch·ªó nh√¥ l√™n ch√≠nh l√† c√°c ch·ªØ c√°i vi·∫øt hoa gi·ªØa t·ª´ ‚Äì n√™n ƒë∆∞·ª£c g·ªçi l√† camel case.
// V√¨ sao d√πng camelCase?

    //L√† quy chu·∫©n ƒë·∫∑t t√™n bi·∫øn ph·ªï bi·∫øn trong JavaScript.

    //Gi√∫p code d·ªÖ ƒë·ªçc, d·ªÖ hi·ªÉu.

    //Tr√°nh l·ªói khi l√†m vi·ªác v·ªõi c√°c th∆∞ vi·ªán ho·∫∑c framework c√≥ quy ƒë·ªãnh ch·∫∑t ch·∫Ω v·ªÅ c√°ch ƒë·∫∑t t√™n.
let currentWeapon = 0 // we start weapon with index 0 in the object array (which is a stick)
// We can also uses let,const or var to declare a variable

//let (hi·ªán ƒë·∫°i, n√™n d√πng,ES6 tr·ªü l√™n)
    //Ph·∫°m vi block (thu·ªôc v·ªÅ {} nh∆∞ trong if, for,...).

    //C√≥ th·ªÉ g√°n l·∫°i.

    //B·ªã hoisting nh∆∞ng kh√¥ng s·ª≠ d·ª•ng ƒë∆∞·ª£c tr∆∞·ªõc khi khai b√°o (g√¢y l·ªói n·∫øu d√πng tr∆∞·ªõc khi khai b√°o).

//const (constant ‚Üí h·∫±ng s·ªë, n√™n d√πng n·∫øu kh√¥ng thay ƒë·ªïi)
    //Ph·∫°m vi block gi·ªëng let.

    //Kh√¥ng th·ªÉ g√°n l·∫°i gi√° tr·ªã m·ªõi.

    //Tuy nhi√™n: v·∫´n c√≥ th·ªÉ thay ƒë·ªïi b√™n trong object ho·∫∑c array.

    //C≈©ng b·ªã hoisting nh∆∞ng kh√¥ng th·ªÉ s·ª≠ d·ª•ng tr∆∞·ªõc khi khai b√°o.


//var (c≈©, kh√¥ng n√™n d√πng n·ªØa) v√¨ nhi·ªÅu l√Ω do li√™n quan ƒë·∫øn l·ªói logic v√† b·∫£o m·∫≠t
//Ph·∫°m vi (scope): thu·ªôc h√†m (function) ho·∫∑c to√†n c·ª•c, kh√¥ng thu·ªôc block (if, for, {}).
//C√≥ th·ªÉ g√°n l·∫°i.
//B·ªã hoisting: ƒë∆∞·ª£c ‚Äúk√©o l√™n‚Äù ƒë·∫ßu h√†m nh∆∞ng kh√¥ng c√≥ gi√° tr·ªã ban ƒë·∫ßu.
//1.var kh√¥ng c√≥ ph·∫°m vi block (block scope)

    //var kh√¥ng tu√¢n theo ph·∫°m vi kh·ªëi l·ªánh (nh∆∞ trong {} c·ªßa if, for, while...).

    //ƒêi·ªÅu n√†y khi·∫øn bi·∫øn c√≥ th·ªÉ b·ªã l·ªô ra ngo√†i, g√¢y l·ªói kh√¥ng mong mu·ªën.
//2. var b·ªã hoisting nguy hi·ªÉm
   // Bi·∫øn khai b√°o b·∫±ng var s·∫Ω ƒë∆∞·ª£c "k√©o l√™n ƒë·∫ßu" h√†m, nh∆∞ng kh√¥ng mang theo gi√° tr·ªã, d·ªÖ g√¢y bug kh√≥ hi·ªÉu.
// 3. var c√≥ th·ªÉ khai b√°o l·∫°i nhi·ªÅu l·∫ßn
    //ƒêi·ªÅu n√†y c√≥ th·ªÉ v√¥ t√¨nh ghi ƒë√® bi·∫øn c≈© m√† kh√¥ng c·∫£nh b√°o.

//declare a variable without inital
//Kh√¥ng c√≥ gi√° tr·ªã kh·ªüi t·∫°o (initial value), n√™n bi·∫øn fighting n√†y s·∫Ω c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† undefined.
let fighting;
let monsterHealth;

// We used array because inventory can store many things
let inventory = ["stick"];//l√† g√°n gi√° tr·ªã ban ƒë·∫ßu cho bi·∫øn l√† m·ªôt m·∫£ng (array) g·ªìm 1 ph·∫ßn t·ª≠ ki·ªÉu chu·ªói..
// you can also used '', "" or ``

//var -> most changing
//let -> medium changing
//const -> least amount of changing(used for variable that will never change)
const button1 = document.querySelector("#button1");// khai bao bien constant ten la button1 b·∫±ng document(ƒê·∫°i di·ªán cho to√†n b·ªô t√†i li·ªáu HTML.)
//.querySelector(...)	T√¨m ph·∫ßn t·ª≠ HTML ƒë·∫ßu ti√™n kh·ªõp v·ªõi b·ªô ch·ªçn CSS trong d·∫•u ngo·∫∑c.
//"#button1"   B·ªô ch·ªçn CSS d√πng ƒë·ªÉ ch·ªçn ph·∫ßn t·ª≠ c√≥ id="button1".

//T∆∞∆°ng t·ª± tr√™n
const button2 = document.querySelector("#button2");
const button3 = document.querySelector("#button3");
const text = document.querySelector("#text");
const xpText = document.querySelector("#xpText");
const healthText = document.querySelector("#healthText");
const goldText = document.querySelector("#goldText");
const monsterStats = document.querySelector("#monsterStats");
const monsterNameText = document.querySelector("#monsterName");
const monsterHealthText = document.querySelector("#monsterHealth");


//khai bao bien slime la css elemet co id la slime 
const slime = document.querySelector('#slime');

const witch = document.querySelector('#witch');

const dragon = document.querySelector('#dragon');

const dagger = document.querySelector('#dagger');

const greatsword = document.querySelector('#Greatsword');

const longsword = document.querySelector('#Longsword');


//C√°ch khai b√°o t∆∞∆°ng t·ª± locations array
const weapon = [
    {
        name: "stick",
        power: 5
    },

    {
        name: "dagger",
        power: 30
    },

    {
        name: "Greatsword",
        power: 50
    },

    {
        name: "Longsword",
        power: 100
    }

];

//C√°ch khai b√°o t∆∞∆°ng t·ª± locations array
const monsters = [
  {
    name: "slime",
    level: 2,
    health: 15
  },
  {
    name: "witch",
    level: 8,
    health: 60
  },
  {
    name: "dragon",
    level: 20,
    health: 300
  }
];


//array can store any datatype including objects
//objects are similar to array except that instead of using indexes to access and modify data
//you access the data in objects through properties



//This store data of location in the game
//location l√† m·ªôt m·∫£ng ch·ª©a nhi·ªÅu ƒë·ªëi t∆∞·ª£ng.
//M·ªói ƒë·ªëi t∆∞·ª£ng m√¥ t·∫£ m·ªôt ƒë·ªãa ƒëi·ªÉm trong game, bao g·ªìm: t√™n, c√°c l·ª±a ch·ªçn n√∫t b·∫•m v√† h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng.

// this locations array consist of 8 elements(8 object)
const locations = [      // declare a constant variable named location and set it to an empty array(inside the empty array we can also declare object ) 
    {
        //object consist of key value pairs
        //Key th∆∞·ªùng l√† chu·ªói (string) kh√¥ng d·∫•u c√°ch, nh∆∞ng n·∫øu c√≥ kho·∫£ng tr·∫Øng th√¨ ph·∫£i ƒë·ªÉ trong d·∫•u " " ho·∫∑c ' '.
        name: "town square", // comma to separate pairs
        "button text": ["Go to store","Go to cave","Fight dragon"],
        "button functions": [goStore, goCave ,fightDragon],
        text: "You are in the town square. You see a sign that says \"Store.\""
        
        //Tr√™n l√† m·ªôt object c√≥ 4 c·∫∑p key-value.
        //Key	                                    Value
        //name	                                "town square"
        //"button text"	        ["Go to store", "Go to cave", "Fight dragon"]
        //"button functions"	        [goStore, goCave, fightDragon]
        //text	                        "You are in the town square."




//"button text": m·∫£ng c√°c d√≤ng ch·ªØ s·∫Ω hi·ªÉn th·ªã tr√™n c√°c n√∫t (buttons).
//"button functions": m·∫£ng ch·ª©a c√°c t√™n h√†m (function) s·∫Ω ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi ch∆°i nh·∫•n v√†o t·ª´ng n√∫t t∆∞∆°ng ·ª©ng.
//text: m√¥ t·∫£ t√¨nh hu·ªëng/ho√†n c·∫£nh khi ng∆∞·ªùi ch∆°i ƒëang ·ªü v·ªã tr√≠ ƒë√≥.
//D·∫•u \" ƒë·ªÉ ch√®n d·∫•u "Store" trong chu·ªói m√† kh√¥ng b·ªã l·ªói.
    },

    {
        //t∆∞∆°ng t·ª±
        name: "store",
		"button text": ["Buy 10 health (10 gold)", "Buy weapon (30 gold)", "Go to town square"],
		"button functions": [buyHealth, buyWeapon, goTown],
		text: "You enter the store."
    },

	{
		name: "cave",
		"button text": ["Fight slime", "Fight witch", "Go to town square"],
		"button functions": [fightSlime, fightBeast, goTown],
		text: "You enter the cave. You see some monsters."
	},
    {
		name: "fight",
		"button text": ["Attack", "Dodge", "Run"],
		"button functions": [attack, dodge, goTown],
		text: "You are fighting a monster."
	},

    {
		name: "kill monster",
		"button text": ["Go to town square", "Go to town square", "Go to town square"],
		"button functions": [goTown, goTown, easterEgg],
        // To used the double quotes for a word like "Arg!" the Text string has to be in a single quotes('')
		text: 'The enemy screams "Arg!" as it dies. You gain experience points and find gold.'
	},

    {
		name: "lose",
		"button text": ["REPLAY?", "REPLAY?", "REPLAY?"],
		"button functions": [restart, restart, restart],
		text: "You die. ‚ò†Ô∏è"
	},

    {
        name: "win",
		"button text": ["REPLAY?", "REPLAY?", "REPLAY?"],
		"button functions": [restart, restart, restart],
		text: "You defeat the dragon! YOU WIN THE GAME! üéâ"
    },

    {
		name: "easter egg",
		"button text": ["2", "8", "Go to town square?"],
		"button functions": [pickTwo, pickEight, goTown],
		text: "You find a secret game. Pick a number above. Ten numbers will be randomly chosen between 0 and 10. If the number you choose matches one of the random numbers, you win!"
	}

]
// [] empty array
// [{}] 1 empty object in an empty array
// [{},{}] 2 empty object in an empty array

// This is a single line comment
/* This is a multi-line  comment */

// initialize buttons(kh·ªüi t·∫°o hay kh·ªüi ƒë·ªông)
//onclick l√† thu·ªôc t√≠nh s·ª± ki·ªán trong JavaScript, d√πng ƒë·ªÉ x·ª≠ l√Ω h√†nh ƒë·ªông khi ng∆∞·ªùi d√πng click chu·ªôt v√†o m·ªôt ph·∫ßn t·ª≠ HTML.

//G√°n h√†m cho bi·∫øn ho·∫∑c thu·ªôc t√≠nh s·ª± ki·ªán: th√¨ h√†m kh√¥ng c√≥ d·∫•u ()
//VD: button1.onclick = goStore ==> goStore kh√¥ng c√≥ d·∫•u ()

button1.onclick = goStore;//ng∆∞·ªùi d√πng click v√†o button1(Bi·∫øn ch·ª©a ph·∫ßn t·ª≠ HTML c√≥ id="button1" (ƒë√£ khai b√°o tr∆∞·ªõc ƒë√≥).), h√†m goStore s·∫Ω ƒë∆∞·ª£c g·ªçi ƒë·ªÉ x·ª≠ l√Ω h√†nh ƒë·ªông ƒë√≥.

//N·∫øu vi·∫øt button.onclick = sayHello(); th√¨ h√†m s·∫Ω ch·∫°y ngay l·∫≠p t·ª©c, kh√¥ng ƒë·ª£i click ‚ùå

//T∆∞∆°ng t·ª±
button2.onclick = goCave;
button3.onclick = fightDragon;


// This update function take a parameter named location
// So data can be passed into this function when it called
function update(location)//T·∫°o h√†m c√≥ tham s·ªë l√† location
{
    //hide the monsterStats when Monster is defeated
    monsterStats.style.display = "none";


    //.innerText	mu·ªën ƒë·∫∑t ch·ªØ thu·∫ßn t√∫y	    VD:Buy 10 health {10 gold}
    //.innerHTML	mu·ªën ƒë·∫∑t c√≥ ƒë·ªãnh d·∫°ng HTML	VD:<b>Buy 10 health</b>
    button1.innerText = location["button text"][0];//location["button text"] This select the "button text" key in the location array
    //[0] select the first value in "button text" key 


    //t∆∞∆°ng t·ª±
    //[1] select the seconds value in "button text" key 
    button2.innerText = location["button text"][1];
    button3.innerText = location["button text"][2];


    button1.onclick = location["button functions"][0];//location["button functions"] This select the "button functions" key in the location array
    button2.onclick = location["button functions"][1];
    button3.onclick = location["button functions"][2];



    //You can also access key in location array by:location.key_name  
    //This only work when key have only 1 value


    text.innerText = location.text;// can also used (location["text"])


    /*
    M·ªôt s·ªë v√≠ d·ª• escape:
    K√Ω t·ª±	√ù nghƒ©a
    \"	    D·∫•u nh√°y k√©p trong chu·ªói
    \'	    D·∫•u nh√°y ƒë∆°n
    \\	    M·ªôt d·∫•u \
    \n	    Xu·ªëng d√≤ng (newline)
    \t	    Tab
    */



    /*
    \" l√† c√°ch ƒë·ªÉ tho√°t (escape) d·∫•u ngo·∫∑c k√©p ".
    V√¨ b·∫°n ƒëang ƒë·∫∑t m·ªôt chu·ªói trong d·∫•u ngo·∫∑c k√©p "...", n·∫øu b·∫°n mu·ªën ch√®n m·ªôt d·∫•u " b√™n trong chu·ªói, b·∫°n c·∫ßn escape n√≥ b·∫±ng \.
    */
   //N·∫øu b·∫°n kh√¥ng d√πng \ ‚Üí S·∫Ω b·ªã l·ªói v√¨ JavaScript hi·ªÉu "store" l√† ph·∫ßn k·∫øt th√∫c chu·ªói.
    //text.innerText = "You are in the town square. You see a sign that says \"store\".";//ƒê·ªÉ ch√®n d·∫•u ngo·∫∑c k√©p b√™n trong 1 string ta d√πng k√Ω t·ª± escape(\)
}




function goTown(){

    //hidden enemy because player is in town
    slime.style.display = "none";
    witch.style.display = "none";
    dragon.style.display = "none";
    // when we call a function we need to pass in a argument
    update(locations[0]);//call the update function with argument locations(locations array)
    //[0] call the first element in array(first object in this case)



}





//function 	T·ª´ kh√≥a ƒë·ªÉ khai b√°o m·ªôt h√†m (function) trong JavaScript.
//goStore	T√™n h√†m ‚Äì b·∫°n s·∫Ω g·ªçi n√≥ b·∫±ng c√°ch vi·∫øt goStore() trong m√£.
//{ ... }	Kh·ªëi m√£ ch·ª©a nh·ªØng g√¨ h√†m s·∫Ω th·ª±c hi·ªán khi ƒë∆∞·ª£c g·ªçi.
function goStore(){

    update(locations[1]);//call the update function with argument locations(locations array)
    //[1] call the second element in array(second object in this case)==> Because array start at index 0





    //console.log("Going to store.");//console.log(...) In ra th√¥ng ƒëi·ªáp trong Console c·ªßa tr√¨nh duy·ªát (d√†nh cho l·∫≠p tr√¨nh vi√™n xem(n√∫t F12 hay Inspect)).
    
    //.innerTextThu·ªôc t√≠nh d√πng ƒë·ªÉ thay ƒë·ªïi ho·∫∑c l·∫•y n·ªôi dung vƒÉn b·∫£n hi·ªÉn th·ªã trong ph·∫ßn t·ª≠
    //"Buy 10 health {10 gold}"	Chu·ªói vƒÉn b·∫£n ƒë∆∞·ª£c g√°n l√†m n·ªôi dung m·ªõi c·ªßa n√∫t
    //button1.innerText = "Buy 10 health {10 gold}";//button1.innerText = "Buy 10 health {10 gold}"; l√† c√°ch thay ƒë·ªïi n·ªôi dung vƒÉn b·∫£n hi·ªÉn th·ªã tr√™n n√∫t button1(ƒë√£ ƒë·ªï d·ªØ li·ªáu v√†o bi·∫øn button1)

    //.innerText	mu·ªën ƒë·∫∑t ch·ªØ thu·∫ßn t√∫y	    VD:Buy 10 health {10 gold}
    //.innerHTML	mu·ªën ƒë·∫∑t c√≥ ƒë·ªãnh d·∫°ng HTML	VD:<b>Buy 10 health</b>

    //t∆∞∆°ng t·ª±

    //button2.innerText = "Buy weapon {30 gold}";//thay ƒë·ªïi text tr√™n button2
    //button3.innerText = "Go to town square";

    //button1.onclick = buyHealth;
    //button2.onclick = buyWeapon;
    //button3.onclick = goTown;

    //thay ƒë·ªïi bi·∫øn text th√†nh You enter the store (m√† bi·∫øn text l√† Bi·∫øn ch·ª©a ph·∫ßn t·ª≠ HTML c√≥ id="text" (ƒë√£ khai b√°o tr∆∞·ªõc ƒë√≥).==> thay ƒë·ªïi text trong th·∫ª <div>)
    //text.innerText = "You enter the store";

}
//t∆∞∆°ng t·ª±
function goCave(){
    console.log("Going to cave.");
    update(locations[2]);//call the update function with argument locations(locations array)
    //[2] call the third element in array(third object in this case)
}




function buyHealth(){

    // if player have 10 or more than 10 gold we execute the block of code below
    if (gold >= 10){
        // -10 gold beacause you just buy Health
        gold = gold - 10;// You can also do it like this: gold -= 10(this called compound assignment) 

        // add 10 health to your player 
        health = health + 10;// You can also do it like this: health += 10(this called compound assignment)


        //make new gold appear to the web
        goldText.innerText = gold;// add the innerText of the goldText to the new gold variable

        //make new health appear to the web
        healthText.innerText = health;//"Hi·ªÉn th·ªã gi√° tr·ªã m√°u (health) l√™n m√†n h√¨nh trong ph·∫ßn t·ª≠ HTML t√™n l√† healthText."
    }

    //If player have less than 10 gold we run this code
    else{
        // set the html element (id=text) to: You do not have enough gold to buy health.
        text.innerText ="You do not have enough gold to buy health.";
    }

}


function buyWeapon(){
    

    // if player have less weapon then the weapon.length - 1(-1 because index start at 0)  ==> we allow them to buy more
    if(currentWeapon < weapon.length - 1){
        if(gold >= 30){
        gold -= 30;// -30 gold from the current gold

        // add 1 to the currentWeapon variable (move to the next element(next object(next weapon) in the weapon array)))
        currentWeapon += 1// You can also used this: currentWeapon++
        //show the new gold 
        goldText.innerText = gold;

        let newWeapon = weapon[currentWeapon].name// access the currentWeapon in the weapon array(.name mean just take the name)
        
        
        // Hi·ªán v≈© kh√≠ m·ªõi(c·ªßa currentWeapon (v√¨ currentWeapon tƒÉng th√¨ array d·ª±a v√†o n c≈©ng tƒÉng theo ))
        document.getElementById(newWeapon).style.display = "block";

        //show text say the player now have a new weapon
        // d·∫•u c·ªông(+) d√πng ƒë·ªÉ c·ªông chu·ªói(string)
        text.innerText ="You now have a " + newWeapon + ".";// add the newWeapon name to the text 
        
        // This add the newWeapon in the inventory
        //push(...)
            //L√† m·ªôt h√†m c√≥ s·∫µn c·ªßa m·∫£ng trong JavaScript, d√πng ƒë·ªÉ th√™m ph·∫ßn t·ª≠ m·ªõi v√†o cu·ªëi m·∫£ng.
        inventory.push(newWeapon);

        //we used += to add Text after the string: You now have a " + newWeapon + "." (above)
        text.innerText += " In your inventory you have: " + inventory;
        }

        else{
            text.innerText = "You do not have enough gold to buy a weapon.";
        }
    }
    else{
        text.innerText = "You already have the most powerful weapon!";
        // allow player to sell weapon
        button2.innerText = "Sell weapon for 15 gold";
        button2.onclick = sellWeapon;
    }

}


function sellWeapon(){
    //only allow to sell if have more than 1 weapon(length of the inventory array is greater than 1)
    if(inventory.length > 1){
        gold += 15;
        goldText.innerText = gold;
        //because we used let the currentWeapon variable only inside this if scope
        //ƒê√¢y l√† m·ªôt khai b√°o bi·∫øn c·ª•c b·ªô ch·ªâ d√πng trong if
        //inventory.shift():Xo√° ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c·ªßa m·∫£ng inventory v√† tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë√≥.
        //let currentWeapon = ...:L∆∞u ph·∫ßn t·ª≠ ƒë√≥ v√†o bi·∫øn currentWeapon ƒë·ªÉ b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng sau 
        let currentWeapon = inventory.shift();

        document.getElementById(currentWeapon).style.display = "none";  // ·∫®n v≈© kh√≠ b·ªã b√°n

        text.innerText = " You sold a " + currentWeapon + ".";
        text.innerText += " In your inventory you have: " + inventory;
    }
    else{
        text.innerText = "Don't sell your only weapon!";
    }
}



function fightSlime(){
    slime.style.display = "block";
    fighting = 0;// the index of the slime in the monsters object array
    GoFight();//This called the GoFight() function
}



function fightBeast(){
    witch.style.display = "block";
    fighting = 1;// the index of the Beastin the monsters object array
    GoFight();
}

function fightDragon(){

    dragon.style.display = "block";

    fighting = 2;
    GoFight();

    console.log("Fighting dragon");
}

function GoFight() {
    update(locations[3]);//call the update function with argument locations(locations array)
    //[3] call the fourth element in array(fourth object in this case)
    monsterHealth = monsters[fighting].health;//monsters[fighting].health this take the health of monsters by the index of fighting variable 

    //This update css style thourgh javascript
    monsterStats.style.display = "block"// change monsterStats css display property from none to block

    /*
monsterStats:L√† t√™n bi·∫øn trong JavaScript, ch·ª©a ph·∫ßn t·ª≠ HTML m√† b·∫°n mu·ªën ƒëi·ªÅu khi·ªÉn.
 .style.display:

L√† c√°ch b·∫°n ƒëi·ªÅu khi·ªÉn vi·ªác hi·ªÉn th·ªã (hi·ªán/·∫©n) c·ªßa ph·∫ßn t·ª≠ trong tr√¨nh duy·ªát.

    display = "none" ‚Üí ·∫®n ƒëi

    display = "block" ‚Üí Nghƒ©a l√† hi·ªÉn th·ªã ph·∫ßn t·ª≠ theo d·∫°ng kh·ªëi (chi·∫øm h·∫øt 1 d√≤ng, gi·ªëng nh∆∞ <div>).

    display = "inline" ‚Üí Hi·ªán theo ki·ªÉu d√≤ng (√≠t d√πng cho div)

    display = "flex" ‚Üí Hi·ªán ki·ªÉu b·ªë c·ª•c linh ho·∫°t

    */



    monsterNameText.innerText = monsters[fighting].name;
    monsterHealthText.innerText = monsterHealth;
}

function attack() {
    text.innerText = " The " + monsters[fighting].name + " attacks.";

    text.innerText += " You attack it with your " + weapon[currentWeapon].name + ".";


    // if Monster is hit we subjact it health 
    // else we don't
    if (isMonsterHit())
    {


        //monsters[fighting].level passing the level of the monsters you are fighting to the getMonsterAttackValue function
        health -= getMonsterAttackValue(monsters[fighting].level);//player get damage
    }
   else{
     text.innerText += " You miss.";

   }

    //monster get damage by the power of the currentWeapon and Random xp(Math.random() * xp) of the player and round it up by Math.floor and +1 to make sure the monster take aleast 1 damage
    monsterHealth -= weapon[currentWeapon].power + Math.floor(Math.random() * xp ) + 1;

    /*
    Math.random() * xp
    Math.random() t·∫°o ra s·ªë ng·∫´u nhi√™n t·ª´ 0 ƒë·∫øn nh·ªè h∆°n 1.
    Nh√¢n v·ªõi xp ƒë·ªÉ t·∫°o ra s√°t th∆∞∆°ng ph·ª• ng·∫´u nhi√™n theo kinh nghi·ªám ng∆∞·ªùi ch∆°i.
    Math.floor(...)L√†m tr√≤n xu·ªëng: (Vd:Math.floor(4.9) ‚Üí 4.)
    + 1:ƒê·∫£m b·∫£o s√°t th∆∞∆°ng t·ªëi thi·ªÉu lu√¥n l·ªõn h∆°n 0.
    */

    //display the new player health and monsterHealth
    healthText.innerText = health;
    monsterHealthText.innerText = monsterHealth;


    if(health <= 0){
        //if player health smaller than or equal to 0 we called the Lose function
        lose();
    } 
    else if( monsterHealth <=0) {
        // a single equal sign is a assignment operator
        // = (To√°n t·ª≠ g√°n) √ù nghƒ©a:D√πng ƒë·ªÉ g√°n gi√° tr·ªã cho bi·∫øn.

        // == or === for comparing
        // == will compare for equality after type conversion
        // === will NOT DO type conversion (two value have to be the exact same type)

        //. == (To√°n t·ª≠ so s√°nh l·ªèng, g·ªçi l√† "loose equality")
        // √ù nghƒ©a:So s√°nh gi√° tr·ªã, nh∆∞ng cho ph√©p √©p ki·ªÉu t·ª± ƒë·ªông n·∫øu ki·ªÉu d·ªØ li·ªáu kh√°c nhau.
        // JavaScript s·∫Ω c·ªë g·∫Øng chuy·ªÉn ƒë·ªïi ki·ªÉu (type coercion) ƒë·ªÉ so s√°nh.

        // === (To√°n t·ª≠ so s√°nh ch·∫∑t, g·ªçi l√† "strict equality")
        // √ù nghƒ©a:So s√°nh gi√° tr·ªã v√† ki·ªÉu d·ªØ li·ªáu lu√¥n. Kh√¥ng √©p ki·ªÉu.

        //üëâ Lu√¥n ∆∞u ti√™n d√πng === v√† !== ƒë·ªÉ tr√°nh l·ªói ng·∫ßm!
        if(fighting === 2){// Ki·ªÉm tra n·∫øu ƒëang ·ªü l∆∞·ª£t ƒë√°nh qu√°i cu·ªëi c√πng
            // G·ªçi h√†m th·∫Øng game n·∫øu ƒë√°nh b·∫°i qu√°i cu·ªëi
            dragon.style.display = "none";
            winGame();
        }else{
            //hidden the enemy because player kill it
            slime.style.display = "none";
            witch.style.display = "none";
             // N·∫øu ch∆∞a ph·∫£i qu√°i cu·ªëi, g·ªçi h√†m ƒë√°nh b·∫°i qu√°i th∆∞·ªùng
            defeatMonster();
        }


//To√°n t·ª≠	T√™n g·ªçi	                So s√°nh ki·ªÉu d·ªØ li·ªáu?	           V√≠ d·ª•	     K·∫øt qu·∫£
//!=	    So s√°nh l·ªèng (loose)	‚ùå Kh√¥ng ki·ªÉm tra ki·ªÉu	         '5' != 5	    false
//!==	    So s√°nh ch·∫∑t (strict)	‚úÖ C√≥ ki·ªÉm tra ki·ªÉu	             '5' !== 5	    true



        //You can also rewrite the if else code above using a ternary statement
        //It gonna look like this: fighting === 2 ? winGame() : defeatMonster();
        // if Math.random() smaller then 0.1(10%) AND inventory.length is not 1 ==> the weapon break
        if(Math.random() <= .1 && inventory.length !== 1 )
        {
            // pop() l√† m·ªôt ph∆∞∆°ng th·ª©c c·ªßa m·∫£ng d√πng ƒë·ªÉ:Xo√° ph·∫ßn t·ª≠ cu·ªëi c√πng c·ªßa m·∫£ng.Tr·∫£ v·ªÅ gi√° tr·ªã v·ª´a b·ªã xo√°.
            // inventory.pop() pop the last element(the strongest weapon) in the inventory array and return It's value
            text.innerText += " Your " + inventory.pop() + " breaks. ";
            currentWeapon--;// minus 1 weapon from the inventory
        }
    }
}

function getMonsterAttackValue(level){
    //This allow player to get hit(damage) based on level of monster and xp of the monster
    //  Math.random(* xp) to random the xp
    // Math.floor() to round the number up
    let hit = (level * 5) - (Math.floor(Math.random() * xp));
    console.log(hit);
    // keyword return will return the hit value to used when called
    return hit;
}

function isMonsterHit(){
    // If Math.random()(between 0 and 1)
    //Tr·∫£ v·ªÅ m·ªôt s·ªë th·ª±c (float) ng·∫´u nhi√™n trong kho·∫£ng: >= 0 v√† < 1 V√≠ d·ª•: 0.23523, 0.98542, 0.00123, v.v.
    // If Math.random() > .2 (.2 mean 0.2 (20%)) ==> will return true(hit the monster)
    // If Math.random() NOT > .2 (.2 mean 0.2 (20%)) ==> will return false(miss the monster)
    // || this is a OR LOGICAL OPERATOR

    return Math.random() > .2 || health < 20;// IF random above 20% ==> A HIT TO MONSTER OR player health smaller than 20 ==> A HIT TO MONSTER TOO
    //only need 1 condition to be TRUE to return TRUE
}

function dodge() {
        text.innerText = "You dodge the attack from the " + monsters[fighting].name + ".";
}


function defeatMonster() {
    //add gold depend on the level of the monster that you are fight time 6.7(kidda defaul value gold(you can change this if you want) for a boss ) 
    //Math.floor just round up the number
    gold += Math.floor(monsters[fighting].level * 6.7);
    xp += monsters[fighting].level; //add player xp depend on the level of the moster you are fighting

    //display gold and xp to the website
    goldText.innerText = gold;
    xpText.innerText = xp;


    // call the fourth index in the location array (the fifth element (fifth object))
    update(locations[4]);
}

function lose() {
    // call the fifth index in the location array (the sixth element (sixth object))
    update(locations[5]);
}


function winGame(){
    // call the sixth index in the location array (the seventh element (seventh object))
    update(locations[6]);

}

// This function just assign everythings back to it defaults value
function restart()
{
    // assign to the defaults value like before
	xp = 0;
	health = 100;
	gold = 50;
	currentWeapon = 0;
	inventory = ["stick"];
	goldText.innerText = gold;
	healthText.innerText = health;
	xpText.innerText = xp;

    //Called the goTown() function
	goTown();
}



function easterEgg(){
    update(locations[7])
}


function pickTwo(){
pick(2); // guess = 2
}


function pickEight() {
pick(8); // guess = 8
}



function pick(guess){
    // T·∫°o m·ªôt m·∫£ng r·ªóng ƒë·ªÉ ch·ª©a c√°c s·ªë ng·∫´u nhi√™n
    let numbers =[];
    // L·∫∑p cho ƒë·∫øn khi m·∫£ng c√≥ ƒë·ªß 10 ph·∫ßn t·ª≠
    while (numbers.length < 10) {
        // T·∫°o m·ªôt s·ªë nguy√™n ng·∫´u nhi√™n t·ª´ 0 ƒë·∫øn 10
        // Math.random() t·∫°o s·ªë th·ª±c t·ª´ 0 ƒë·∫øn <1
        // *11 ƒë·ªÉ ƒë∆∞a th√†nh kho·∫£ng t·ª´ 0 ƒë·∫øn <11
        // Math.floor(...) ƒë·ªÉ l√†m tr√≤n xu·ªëng, cho k·∫øt qu·∫£ t·ª´ 0 ƒë·∫øn 10
        // Th√™m s·ªë n√†y v√†o m·∫£ng 'numbers'
        numbers.push(Math.floor(Math.random() * 11));
    }
   
    // \n l√† k√Ω t·ª± xu·ªëng d√≤ng trong chu·ªói
    // Hi·ªÉn th·ªã s·ªë ng∆∞·ªùi ch∆°i ƒë√£ ƒëo√°n v√† chu·∫©n b·ªã in danh s√°ch 10 s·ªë ng·∫´u nhi√™n
     text.innerText = "You picked " + guess + ". Here are the random numbers:\n"; // \n is the newline character

    // Duy·ªát qua m·∫£ng numbers v√† in t·ª´ng s·ªë ra m√†n h√¨nh
    for (let i = 0; i < 10; i++) {
         text.innerText += numbers[i] + "\n";
    }

    // Ki·ªÉm tra xem guess c√≥ n·∫±m trong m·∫£ng numbers hay kh√¥ng
    // N·∫øu indexOf(guess) tr·∫£ v·ªÅ kh√°c -1 th√¨ guess c√≥ t·ªìn t·∫°i trong m·∫£ng
     if (numbers.indexOf(guess) !== -1)//if !== -1 ==> it is the list
    {
        // Ng∆∞·ªùi ch∆°i ƒëo√°n ƒë√∫ng ‚Üí c·ªông 20 v√†ng
        text.innerText += "Right! You win 20 gold!"
        gold += 20;
        goldText.innerText = gold; // C·∫≠p nh·∫≠t l·∫°i s·ªë v√†ng tr√™n giao di·ªán
    } else {
        // Ng∆∞·ªùi ch∆°i ƒëo√°n sai ‚Üí tr·ª´ 10 m√°u
        text.innerText += "Wrong! You lose 10 health!"
        health -= 10;
        healthText.innerText = health// C·∫≠p nh·∫≠t l·∫°i m√°u tr√™n giao di·ªán
        // N·∫øu m√°u ‚â§ 0 th√¨ g·ªçi h√†m lose() ƒë·ªÉ x·ª≠ l√Ω thua cu·ªôc
        if (health <= 0) {
          lose();
        }
    }
}





//H·ªçc xong (link:https://www.youtube.com/watch?v=SYx885hX0OY&t=5355s)